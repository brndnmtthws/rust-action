name: brndnmtthws/rust-action
description: |
  All-in-one Rust action with caching for linting, building, testing, and
  producing coverage reports.
author: Brenden Matthews <github@brenden.brndn.io>
branding:
  icon: box
  color: purple

inputs:
  toolchain:
    default: stable
    description: Specify a Rust toolchain.
  components:
    default: |
      clippy
      rustfmt
    description: Rust components to install along with the toolchain.
  cargo-packages:
    default: |
      cargo-tarpaulin
    description: The default set of cargo packages to install
  disable-cargo-registry-cache:
    description: If set to 'true', the Cargo registry cache will not be enabled.
  disable-cargo-target-cache:
    description: If set to 'true', the Cargo target cache will not be enabled.
  enable-sccache:
    description: If set to 'true', sccache will be enabled.
  target-cache-key:
    description: The cache key to use for caching the target dirs.
    required: false
  target-cache-restore-keys:
    description: The cache restore keys to use for caching the target dirs.
    required: false
  registry-cache-key:
    description: The cache key to use for caching the cargo registry.
    required: false
  registry-cache-restore-keys:
    description: The cache restore keys to use for caching the cargo registry.
    required: false
  sccache-cache-key:
    description: The cache key to use for caching sccache.
    required: false
  sccache-cache-restore-keys:
    description: The cache restore keys to use for caching sccache.
    required: false

runs:
  using: 'composite'
  steps:
    - name: Set cache keys
      id: cache-keys
      shell: bash
      run: |
        TARGET_CACHE_KEY="${{inputs.target-cache-key}}"
        DEFAULT_TARGET_CACHE_KEY="cargo-target-${{runner.os}}-${{runner.arch}}-${{inputs.toolchain}}-${{ hashFiles('**/Cargo.lock') }}"
        echo "target-cache-key=${TARGET_CACHE_KEY:-$DEFAULT_TARGET_CACHE_KEY}" >> $GITHUB_OUTPUT

        TARGET_CACHE_RESTORE_KEYS="${{inputs.target-cache-restore-keys}}"
        DEFAULT_TARGET_CACHE_RESTORE_KEYS="cargo-target-${{runner.os}}-${{runner.arch}}-${{inputs.toolchain}}-
        cargo-target-${{runner.os}}-${{runner.arch}}-"
        echo "target-cache-restore-keys<<EOF" >> $GITHUB_OUTPUT
        echo "${TARGET_CACHE_RESTORE_KEYS:-$DEFAULT_TARGET_CACHE_RESTORE_KEYS}" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

        REGISTRY_CACHE_KEY="${{inputs.registry-cache-key}}"
        DEFAULT_REGISTRY_CACHE_KEY="cargo-registry-${{ inputs.toolchain }}-${{ hashFiles('**/Cargo.lock', '**/rust-toolchain.toml') }}"
        echo "registry-cache-key=${REGISTRY_CACHE_KEY:-$DEFAULT_REGISTRY_CACHE_KEY}" >> $GITHUB_OUTPUT

        REGISTRY_CACHE_RESTORE_KEYS="${{ inputs.registry-cache-restore-keys }}"
        DEFAULT_REGISTRY_CACHE_RESTORE_KEYS="cargo-registry-${{inputs.toolchain}}-
        cargo-registry-"
        echo "registry-cache-restore-keys<<EOF" >> $GITHUB_OUTPUT
        echo "${REGISTRY_CACHE_RESTORE_KEYS:-$DEFAULT_REGISTRY_CACHE_RESTORE_KEYS}" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

        SCCACHE_CACHE_KEY="${{inputs.sccache-cache-key}}"
        DEFAULT_SCCACHE_CACHE_KEY="sccache-${{runner.os}}-${{runner.arch}}-${{inputs.toolchain}}-${{ hashFiles('**/Cargo.lock') }}"
        echo "sccache-cache-key=${SCCACHE_CACHE_KEY:-$DEFAULT_SCCACHE_CACHE_KEY}" >> $GITHUB_OUTPUT

        SCCACHE_CACHE_RESTORE_KEYS="${{inputs.sccache-cache-restore-keys}}"
        DEFAULT_SCCACHE_CACHE_RESTORE_KEYS="sccache-${{runner.os}}-${{inputs.toolchain}}-"
        echo "sccache-cache-restore-keys<<EOF" >> $GITHUB_OUTPUT
        echo "${SCCACHE_CACHE_RESTORE_KEYS:-$DEFAULT_SCCACHE_CACHE_RESTORE_KEYS}" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    - uses: brndnmtthws/cache@v4
      name: Cache Cargo registry
      if: ${{ inputs.disable-cargo-registry-cache != 'true' }}
      with:
        key: ${{ steps.cache-keys.outputs.registry-cache-key }}
        restore-keys: ${{ steps.cache-keys.outputs.registry-cache-restore-keys }}
        path: |
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
    - uses: brndnmtthws/cache@v4
      name: Cache Cargo target
      if: ${{ inputs.disable-cargo-target-cache != 'true' }}
      with:
        key: ${{ steps.cache-keys.outputs.target-cache-key }}
        restore-keys: ${{ steps.cache-keys.outputs.target-cache-restore-keys }}
        path: |
          **/target/*
    - uses: brndnmtthws/cache@v4
      name: Cache sccache local files
      if: ${{ inputs.enable-sccache == 'true' }}
      with:
        key: ${{ steps.cache-keys.outputs.sccache-cache-key }}
        restore-keys: ${{ steps.cache-keys.outputs.sccache-cache-restore-keys }}
        path: |
          ~/.sccache
    - uses: brndnmtthws/rust-action-rustup@v1
      name: Install toolchain
      id: rustup
      with:
        toolchain: ${{ inputs.toolchain }}
        profile: minimal
        components: |
          rustfmt
          clippy
    - uses: brndnmtthws/rust-action-cargo-binstall@v1
      name: Install sccache
      if: ${{ inputs.enable-sccache == 'true' }}
      with:
        packages: sccache
    - shell: bash
      run: echo "SCCACHE_DIR=$HOME/.sccache" >> $GITHUB_ENV
      if: ${{ inputs.enable-sccache == 'true' }}
    - shell: bash
      run: echo "RUSTC_WRAPPER=sccache" >> $GITHUB_ENV
      if: ${{ inputs.enable-sccache == 'true' }}
    - shell: bash
      run: echo "CARGO_INCREMENTAL=0" >> $GITHUB_ENV
      if: ${{ inputs.enable-sccache == 'true' }}
    - uses: brndnmtthws/rust-action-cargo-binstall@v1
      name: Install Cargo packages
      if: ${{ inputs.cargo-packages != '' }}
      with:
        packages: ${{ inputs.cargo-packages }}
